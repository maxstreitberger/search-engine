 Test Page    Search Engine I'm building a fully modular search engine for my bachelor thesis.    Architecture  Crawler Indexer Ranker   Architecture   Crawler  Currently, the crawler only collects text documents from a specified directory. The crawler goes through every sub-directory and registers a found document. These documents get pushed to the document store, where they are checked if a document is added or modified. This means that the document store will ignore unchanged documents. Changes and additions are saved in the document store and additionally stored in the repository, where the indexer can pick these documents up.  Indexer  The indexer splits every document into individual tokens. Next, every token is checked for special characters ("?", "!", "<", ">", "-", "_", etc.) and if the token is a stopword (also called function word). After unnecessary tokens and characters are removed, the indexer collects the position and the number of appearances of each token in the document. Finally,the indexer stores each token together with its meta-information in the index  Ranker  Currently, the ranker is very basic in the way that it searches for a direct match for the query in the index. Before the search, the ranker removes all possible whitespace around the query and transforms it to lower case. Next, it searches for a perfect match in the index. If a match is found, it collects all the documents in which the found token appears. Before returning the documents to the user, the ranker sorts the documents by the number of appearances of the token.  The search engine can be found on GitHub.